const { CohereClient } = require("cohere-ai");
require("dotenv").config();

const cohereApiKey = process.env.COHERE_API_KEY;

if (!cohereApiKey) {
  throw new Error("Cohere API key is missing. Please check your .env file.");
}

const cohere = new CohereClient({
  token: cohereApiKey,
});

const generateQuestions = async (jobTitle, experienceLevel) => {
  const prompt = `Generate technical interview questions for a ${experienceLevel} ${jobTitle}.
Do NOT add any introductory sentences or summaries like "Here are some potential technical interview questions on ReactJS for a junior level candidate, along with the corresponding evaluation criteria:".
Each question should be immediately followed by its Evaluation Criteria.
Strict format:
Question: <question text> 
Evaluation: <evaluation text>
Only output the exact Question/Evaluation pairs, nothing else.`;

  try {
    const response = await cohere.generate({
      model: "command",
      prompt: prompt,
      max_tokens: 600,
      temperature: 0.7,
    });

    const generations = response.generations;
    if (!generations || generations.length === 0) {
      throw new Error("No questions generated by Cohere.");
    }

    const generatedText = generations[0].text.trim();

    // Now split on "Question:" safely
    const questionBlocks = generatedText
      .split(/Question:/i)
      .map((block) => block.trim())
      .filter((block) => block.length > 0); // Remove accidental blanks

    const parsedQuestions = questionBlocks.map((block, index) => {
      const [questionPart, evaluationPart] = block.split(/Evaluation:/i);

      return {
        id: index + 1,
        question: questionPart ? questionPart.trim() : "No question found",
        evaluation: evaluationPart
          ? evaluationPart.trim()
          : "No evaluation found",
      };
    });

    return parsedQuestions;
  } catch (error) {
    console.error("Cohere generate error:", error.message || error);
    throw new Error("Failed to generate questions via Cohere.");
  }
};

module.exports = { generateQuestions };
